// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package go_block

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FriendsServiceClient is the client API for FriendsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FriendsServiceClient interface {
	Heartbeat(ctx context.Context, in *FriendsRequest, opts ...grpc.CallOption) (*FriendsResponse, error)
	Invite(ctx context.Context, in *FriendsRequest, opts ...grpc.CallOption) (*FriendsResponse, error)
	Accept(ctx context.Context, in *FriendsRequest, opts ...grpc.CallOption) (*FriendsResponse, error)
	GetConnections(ctx context.Context, in *FriendsRequest, opts ...grpc.CallOption) (*FriendsResponse, error)
	Remove(ctx context.Context, in *FriendsRequest, opts ...grpc.CallOption) (*FriendsResponse, error)
}

type friendsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFriendsServiceClient(cc grpc.ClientConnInterface) FriendsServiceClient {
	return &friendsServiceClient{cc}
}

func (c *friendsServiceClient) Heartbeat(ctx context.Context, in *FriendsRequest, opts ...grpc.CallOption) (*FriendsResponse, error) {
	out := new(FriendsResponse)
	err := c.cc.Invoke(ctx, "/BlockFriends.FriendsService/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendsServiceClient) Invite(ctx context.Context, in *FriendsRequest, opts ...grpc.CallOption) (*FriendsResponse, error) {
	out := new(FriendsResponse)
	err := c.cc.Invoke(ctx, "/BlockFriends.FriendsService/Invite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendsServiceClient) Accept(ctx context.Context, in *FriendsRequest, opts ...grpc.CallOption) (*FriendsResponse, error) {
	out := new(FriendsResponse)
	err := c.cc.Invoke(ctx, "/BlockFriends.FriendsService/Accept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendsServiceClient) GetConnections(ctx context.Context, in *FriendsRequest, opts ...grpc.CallOption) (*FriendsResponse, error) {
	out := new(FriendsResponse)
	err := c.cc.Invoke(ctx, "/BlockFriends.FriendsService/GetConnections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendsServiceClient) Remove(ctx context.Context, in *FriendsRequest, opts ...grpc.CallOption) (*FriendsResponse, error) {
	out := new(FriendsResponse)
	err := c.cc.Invoke(ctx, "/BlockFriends.FriendsService/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FriendsServiceServer is the server API for FriendsService service.
// All implementations should embed UnimplementedFriendsServiceServer
// for forward compatibility
type FriendsServiceServer interface {
	Heartbeat(context.Context, *FriendsRequest) (*FriendsResponse, error)
	Invite(context.Context, *FriendsRequest) (*FriendsResponse, error)
	Accept(context.Context, *FriendsRequest) (*FriendsResponse, error)
	GetConnections(context.Context, *FriendsRequest) (*FriendsResponse, error)
	Remove(context.Context, *FriendsRequest) (*FriendsResponse, error)
}

// UnimplementedFriendsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedFriendsServiceServer struct {
}

func (UnimplementedFriendsServiceServer) Heartbeat(context.Context, *FriendsRequest) (*FriendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedFriendsServiceServer) Invite(context.Context, *FriendsRequest) (*FriendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invite not implemented")
}
func (UnimplementedFriendsServiceServer) Accept(context.Context, *FriendsRequest) (*FriendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Accept not implemented")
}
func (UnimplementedFriendsServiceServer) GetConnections(context.Context, *FriendsRequest) (*FriendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnections not implemented")
}
func (UnimplementedFriendsServiceServer) Remove(context.Context, *FriendsRequest) (*FriendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}

// UnsafeFriendsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FriendsServiceServer will
// result in compilation errors.
type UnsafeFriendsServiceServer interface {
	mustEmbedUnimplementedFriendsServiceServer()
}

func RegisterFriendsServiceServer(s grpc.ServiceRegistrar, srv FriendsServiceServer) {
	s.RegisterService(&FriendsService_ServiceDesc, srv)
}

func _FriendsService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlockFriends.FriendsService/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsServiceServer).Heartbeat(ctx, req.(*FriendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendsService_Invite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsServiceServer).Invite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlockFriends.FriendsService/Invite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsServiceServer).Invite(ctx, req.(*FriendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendsService_Accept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsServiceServer).Accept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlockFriends.FriendsService/Accept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsServiceServer).Accept(ctx, req.(*FriendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendsService_GetConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsServiceServer).GetConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlockFriends.FriendsService/GetConnections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsServiceServer).GetConnections(ctx, req.(*FriendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendsService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BlockFriends.FriendsService/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsServiceServer).Remove(ctx, req.(*FriendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FriendsService_ServiceDesc is the grpc.ServiceDesc for FriendsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FriendsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BlockFriends.FriendsService",
	HandlerType: (*FriendsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heartbeat",
			Handler:    _FriendsService_Heartbeat_Handler,
		},
		{
			MethodName: "Invite",
			Handler:    _FriendsService_Invite_Handler,
		},
		{
			MethodName: "Accept",
			Handler:    _FriendsService_Accept_Handler,
		},
		{
			MethodName: "GetConnections",
			Handler:    _FriendsService_GetConnections_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _FriendsService_Remove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "block_friends.proto",
}
