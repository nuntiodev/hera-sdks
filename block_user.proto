syntax = "proto3";

package BlockUser;

option go_package = "./go_block";

import "google/protobuf/timestamp.proto";

service UserService {
    rpc Heartbeat(UserRequest) returns (UserResponse) {}
    rpc Create(UserRequest) returns (UserResponse) {}
    rpc UpdatePassword(UserRequest) returns (UserResponse) {}
    rpc UpdateMetadata(UserRequest) returns (UserResponse) {}
    rpc UpdateImage(UserRequest) returns (UserResponse) {}
    rpc UpdateName(UserRequest) returns (UserResponse) {}
    rpc UpdateBirthdate(UserRequest) returns (UserResponse) {}
    rpc UpdateEmail(UserRequest) returns (UserResponse) {}
    rpc UpdateOptionalId(UserRequest) returns (UserResponse) {}
    rpc UpdateSecurity(UserRequest) returns (UserResponse) {}
    rpc Get(UserRequest) returns (UserResponse) {}
    rpc GetAll(UserRequest) returns (UserResponse) {}
    rpc ValidateCredentials(UserRequest) returns (UserResponse) {}
    rpc Login(UserRequest) returns (UserResponse) {}
    rpc ValidateToken(UserRequest) returns (UserResponse) {}
    rpc BlockToken(UserRequest) returns (UserResponse) {}
    rpc BlockTokenById(UserRequest) returns (UserResponse) {}
    rpc RefreshToken(UserRequest) returns (UserResponse) {}
    rpc GetTokens(UserRequest) returns (UserResponse) {}
    rpc PublicKeys(UserRequest) returns (UserResponse) {}
    rpc RecordActiveMeasurement(UserRequest) returns (UserResponse) {}
    rpc UserActiveHistory(UserRequest) returns (UserResponse) {}
    rpc NamespaceActiveHistory(UserRequest) returns (UserResponse) {}
    rpc Delete(UserRequest) returns (UserResponse) {}
    rpc DeleteBatch(UserRequest) returns (UserResponse) {}
    rpc DeleteNamespace(UserRequest) returns (UserResponse) {}
    rpc CreateConifg(ConfigRequest) returns (ConfigResponse) {}
    rpc UpdateConfig(ConfigRequest) returns (ConfigResponse) {}
    rpc GetConfig(ConfigRequest) returns (ConfigResponse) {}
    rpc DeleteConfig(ConfigRequest) returns (ConfigResponse) {}
}

message AuthConfig {
    string logo = 1;
    string welcome_title = 2; 
    string welcome_details = 3;
    string login_button = 4;
    string login_title = 5;
    string login_details = 6;
    string register_button = 7;
    string register_title = 8;
    string register_details = 9;
    string missing_password_title = 10;
    string missing_password_details = 11;
    string missing_email_title = 12;
    string missing_email_details = 13;
    string password_do_not_match_title = 14;
    string password_do_not_match_details = 15;
    string created_by = 16;
}

message Config {
    string id = 1;
    string name = 2;
    string website = 3;
    string about = 4;
    string email = 5;
    string logo = 6;
    bool enable_nuntio_connect = 7;
    bool disable_default_signup = 8;
    bool disable_default_login = 9;
    google.protobuf.Timestamp created_at = 10;
    google.protobuf.Timestamp updated_at = 11;
    AuthConfig auth_config = 13;
    int32 internal_encryption_level = 14;
}

message User {
    string id = 1;
    string optional_id = 2;
    string email = 3;
    string password = 4;
    string image = 5;
    bool external_encrypted = 6;
    int32 external_encryption_level = 7;
    bool internal_encrypted = 8;
    int32 internal_encryption_level = 9;
    string metadata = 10;
	google.protobuf.Timestamp created_at = 11;
    google.protobuf.Timestamp updated_at = 12;
    google.protobuf.Timestamp encrypted_at = 13;
    bool require_email_verification = 14;
    string first_name = 15;
    string last_name = 16;
    google.protobuf.Timestamp birthdate = 17;
}

message UserFilter {
    enum SortBy {
        CREATED_AT = 0;
        UPDATE_AT = 1;
    }
    enum Order {
        INC = 0;
        DEC = 1;
    }
    int32 from = 1;
    int32 to = 2;
    SortBy sort = 3;
    Order order = 4;
}

enum TokenType {
    TOKEN_TYPE_INVALID = 0;
    TOKEN_TYPE_ACCESS = 1;
    TOKEN_TYPE_REFRESH = 2;
}

enum Platform {
    INVALID_PLATFORM = 0;
    IOS = 1;
    ANDROID = 2;
    WEB = 3;
    MACOS = 4;
    LINUX = 5;
    WINDOWS = 6;
}

message Location {
    string country = 1;
    string country_code = 2;
    string city = 3;
}

message Token {
    string id = 1;
    string user_id = 2;
    bool blocked = 3;
    string device_info = 4;
    google.protobuf.Timestamp blocked_at = 5;
    google.protobuf.Timestamp created_at = 6;
    google.protobuf.Timestamp used_at = 7;
    google.protobuf.Timestamp expires_at = 8;
    bool encrypted = 9;
    string access_token = 10;
    string refresh_token = 11;
    int32 internal_encryption_level = 12;
    Location logged_in_from = 13;
    TokenType type = 14;
}

message ActiveMeasurement {
    string id = 1;
    string user_id = 2;
    int32 seconds = 3;
    google.protobuf.Timestamp created_at = 5;
    google.protobuf.Timestamp expires_at = 6;
    Location from = 7;
}

message CityHistoryMap {
    map<string, int32> city_amount = 1;
}

message ActiveHistoryData {
    int32 seconds = 1;   
    int32 points = 2;
    map<string, CityHistoryMap> from = 3;
}

message ActiveHistory {
    int32 year = 1;
    string user_id = 2;
    map<int32, ActiveHistoryData> data = 3;
}

message UserRequest {
    User user = 1;
    User update = 2;
    UserFilter filter = 3;
    string namespace = 4;
    string encryption_key = 5;
    repeated User user_batch = 6;
    Token token = 7;
    bool validatePassword = 8;
    string cloud_token = 9;
    string token_pointer = 10;
    ActiveMeasurement active_measurement = 11;
    int32 total_active_time = 12;
    int32 average_active_time = 13;
}

message UserResponse {
    User user = 1;
    repeated User users = 2;
    int64 users_amount = 3;
    Token token = 4;
    repeated Token tokens = 5;
    map<string, string> public_keys = 6;
    ActiveMeasurement active_measurement = 7;
}

message ConfigRequest {
    Config config = 1;
    Config update = 2;
}

message ConfigResponse {
    Config config = 1;
}