syntax = "proto3";

package BlockUser;

option go_package = "./go_block";

import "google/protobuf/timestamp.proto";

service UserService {
    rpc Heartbeat(UserRequest) returns (UserResponse) {}

    rpc Create(UserRequest) returns (UserResponse) {}
    rpc UpdatePassword(UserRequest) returns (UserResponse) {}
    rpc UpdateMetadata(UserRequest) returns (UserResponse) {}
    rpc UpdateImage(UserRequest) returns (UserResponse) {}
    rpc UpdateName(UserRequest) returns (UserResponse) {}
    rpc UpdateBirthdate(UserRequest) returns (UserResponse) {}
    rpc UpdateEmail(UserRequest) returns (UserResponse) {}
    rpc UpdatePhoneNumber(UserRequest) returns (UserResponse) {}
    rpc UpdateUsername(UserRequest) returns (UserResponse) {}
    rpc UpdateSecurity(UserRequest) returns (UserResponse) {}
    rpc Get(UserRequest) returns (UserResponse) {}
    rpc GetAll(UserRequest) returns (UserResponse) {}
    rpc ValidateCredentials(UserRequest) returns (UserResponse) {}
    rpc Login(UserRequest) returns (UserResponse) {}
    rpc ValidateToken(UserRequest) returns (UserResponse) {}
    rpc BlockToken(UserRequest) returns (UserResponse) {}
    rpc BlockTokenById(UserRequest) returns (UserResponse) {}
    rpc RefreshToken(UserRequest) returns (UserResponse) {}
    rpc GetTokens(UserRequest) returns (UserResponse) {}
    rpc PublicKeys(UserRequest) returns (UserResponse) {}
    rpc RecordActiveMeasurement(UserRequest) returns (UserResponse) {}
    rpc UserActiveHistory(UserRequest) returns (UserResponse) {}
    rpc NamespaceActiveHistory(UserRequest) returns (UserResponse) {}
    rpc SendVerificationEmail(UserRequest) returns (UserResponse) {}
    rpc VerifyEmail(UserRequest) returns (UserResponse) {}
    rpc SendResetPasswordEmail(UserRequest) returns (UserResponse) {}
    rpc ResetPassword(UserRequest) returns (UserResponse) {}
    rpc Delete(UserRequest) returns (UserResponse) {}
    rpc DeleteBatch(UserRequest) returns (UserResponse) {}
    
    rpc DeleteNamespace(UserRequest) returns (UserResponse) {}
    
    rpc CreateNamespaceConfig(UserRequest) returns (UserResponse) {}
    rpc UpdateConfigSettings(UserRequest) returns (UserResponse) {}
    rpc UpdateConfigDetails(UserRequest) returns (UserResponse) {}
    rpc GetConfig(UserRequest) returns (UserResponse) {}
    rpc DeleteConfig(UserRequest) returns (UserResponse) {}
    
    rpc CreateText(UserRequest) returns (UserResponse) {}
    rpc GetText(UserRequest) returns (UserResponse) {}
    rpc UpdateGeneralText(UserRequest) returns (UserResponse) {}
    rpc UpdateWelcomeText(UserRequest) returns (UserResponse) {}
    rpc UpdateRegisterText(UserRequest) returns (UserResponse) {}
    rpc UpdateLoginText(UserRequest) returns (UserResponse) {}
    rpc UpdateProfileText(UserRequest) returns (UserResponse) {}
    rpc DeleteText(UserRequest) returns (UserResponse) {}

    rpc InitializeApplication(UserRequest) returns (UserResponse) {}
}

message GeneralText {
    string missing_password_title = 1;
    string missing_password_details = 2;
    string missing_email_title = 3;
    string missing_email_details = 4;
    string created_by = 5;
    string password_hint = 6;
    string email_hint = 7;
    string error_title = 8;
    string error_description = 9;
    string no_wifi_title = 10;
    string no_wifi_description = 11;
}

message WelcomeText {
    string welcome_title = 1; 
    string welcome_details = 2;
    string continue_with_nuntio = 3;
}

message RegisterText {
    string register_button = 1;
    string register_title = 2;
    string register_details = 3;
    string password_do_not_match_title = 4;
    string password_do_not_match_details = 5;
    string repeat_password_hint = 6;
    string contains_special_char = 7;
    string contains_number_char = 8;
    string password_must_match = 9;
    string contains_eight_chars = 10;
}

message ProfileText {
    string profile_title = 1;
    string logout = 2;
    string change_email_title = 3;
    string change_email_description = 4;
    string change_password_title = 5;
    string change_password_description = 6;
}

message LoginText {
    string login_button = 1;
    string login_title = 2;
    string login_details = 3;
    string forgot_password = 4;
}

enum LanguageCode {
    INVALID_LANGUAGE_CODE = 0;
    EN = 1;
    DK = 2;
}

message Text {
    LanguageCode id = 1;
    int32 internal_encryption_level = 2;
    repeated LanguageCode available_languages = 3;
    repeated LanguageCode supported_languages = 4;
    GeneralText general_text = 5;
    WelcomeText welcome_text = 6;
    LoginText login_text = 7;
    RegisterText register_text = 8;
    ProfileText profile_text = 9;
    google.protobuf.Timestamp created_at = 10;
    google.protobuf.Timestamp updated_at = 11;
}

message Config {
    string id = 1;
    string name = 2;
    string logo = 3;
    bool enable_nuntio_connect = 4;
    bool disable_default_signup = 5;
    bool disable_default_login = 6;
    google.protobuf.Timestamp created_at = 7;
    google.protobuf.Timestamp updated_at = 8;
    bool validate_password = 9;
    string nuntio_connect_id = 10;
    bool require_email_verification = 11;
    LoginType login_type = 12;
    bool require_phone_number_verification = 13;
    LanguageCode default_language = 14;
    int32 internal_encryption_level = 15;
}

enum EmailType {
    EMAIL_TYPE_INVALID = 0;
    EMAIL_TYPE_VERIFY_EMAIL = 1;
    EMAIL_TYPE_FORGOT_PASSWORD = 2;
    EMAIL_TYPE_CUSTOM = 3;
}

message Email {
    string id = 1;
    string logo = 2;
    string welcome_message = 3;
    string body_message = 4;
    string footer_message = 5;
    string title = 6;
    google.protobuf.Timestamp created_at = 7;
    google.protobuf.Timestamp updated_at = 8;
    google.protobuf.Timestamp encrypted_at = 9;
    bool trigger_on_create = 10;
    int32 internal_encryption_level = 11;
    string subject = 12;
    string template_path = 13;
    LanguageCode language_code = 14;
}

message User {
    string id = 1;
    string username = 2;
    string email = 3;
    string password = 4;
    string image = 5;
    int32 external_encryption_level = 6;
    int32 internal_encryption_level = 7;
    string metadata = 8;
	google.protobuf.Timestamp created_at = 9;
    google.protobuf.Timestamp updated_at = 10;
    google.protobuf.Timestamp encrypted_at = 11;
    string first_name = 12;
    string last_name = 13;
    google.protobuf.Timestamp birthdate = 14;
    google.protobuf.Timestamp email_verified_at = 15;
    bool email_is_verified = 16;
    google.protobuf.Timestamp verification_email_sent_at = 17;
    string email_verification_code = 18;
    google.protobuf.Timestamp verification_email_expires_at = 19;
    int32 verify_email_attempts = 20;
    string reset_password_code = 21;
    google.protobuf.Timestamp reset_password_email_sent_at = 22;
    google.protobuf.Timestamp reset_password_email_expires_at = 23;
    int32 reset_password_attempts = 24;
    repeated string verified_emails = 25;
    string email_hash = 26;
    string phone_number = 27;
    string phone_number_hash = 28;
    bool phone_number_is_verified = 29;
    google.protobuf.Timestamp verification_text_sent_at = 30;
    repeated string verified_phone_numbers = 31;
    LanguageCode preffered_language = 32;
}

message UserFilter {
    enum SortBy {
        CREATED_AT = 0;
        UPDATE_AT = 1;
    }
    enum Order {
        INC = 0;
        DEC = 1;
    }
    int32 from = 1;
    int32 to = 2;
    SortBy sort = 3;
    Order order = 4;
}

enum TokenType {
    TOKEN_TYPE_INVALID = 0;
    TOKEN_TYPE_ACCESS = 1;
    TOKEN_TYPE_REFRESH = 2;
}

enum Platform {
    INVALID_PLATFORM = 0;
    IOS = 1;
    ANDROID = 2;
    WEB = 3;
    MACOS = 4;
    LINUX = 5;
    WINDOWS = 6;
}

message Location {
    string country = 1;
    string country_code = 2;
    string city = 3;
}

message Token {
    string id = 1;
    string user_id = 2;
    bool blocked = 3;
    string device_info = 4;
    google.protobuf.Timestamp blocked_at = 5;
    google.protobuf.Timestamp created_at = 6;
    google.protobuf.Timestamp used_at = 7;
    google.protobuf.Timestamp expires_at = 8;
    string access_token = 9;
    string refresh_token = 10;
    int32 internal_encryption_level = 11;
    Location logged_in_from = 12;
    TokenType type = 13;
}

message ActiveMeasurement {
    string id = 1;
    string user_id = 2;
    int32 seconds = 3;
    google.protobuf.Timestamp created_at = 5;
    google.protobuf.Timestamp expires_at = 6;
    Location from = 7;
    int32 year = 8;
    Platform device = 9;
}

message CityHistoryMap {
    map<string, int32> city_amount = 1;
}

message ActiveHistoryData {
    int32 seconds = 1;   
    int32 points = 2;
    map<string, CityHistoryMap> from = 3;
    map<int32, string> dau = 4;
    map<string, int32> device = 5;
}

message ActiveHistory {
    int32 year = 1;
    string user_id = 2;
    map<int32, ActiveHistoryData> data = 3;
}

enum LoginStatus {
    AUTHENTICATED = 0;
    EMAIL_IS_NOT_VERIFIED = 1;
}

enum LoginType {
    LOGIN_TYPE_INVALID = 0;
    LOGIN_TYPE_EMAIL_PASSWORD = 1;
    LOGIN_TYPE_PHONE_PASSWORD = 2;
    LOGIN_TYPE_EMAIL_VERIFICATION_CODE = 3;
    LOGIN_TYPE_PHONE_VERIFICATION_CODE = 4;
}

message LoginSession {
    LoginStatus login_status = 1;
    google.protobuf.Timestamp email_sent_at = 2;
    google.protobuf.Timestamp email_expires_at = 3;
}

message UserRequest {
    User user = 1;
    User update = 2;
    UserFilter filter = 3;
    string namespace = 4;
    string encryption_key = 5;
    repeated User user_batch = 6;
    Token token = 7;
    string cloud_token = 8;
    string token_pointer = 9;
    ActiveMeasurement active_measurement = 10;
    int32 total_active_time = 11;
    int32 average_active_time = 12;
    Config config = 13;
    Email email = 14;
    string email_verification_code = 15;
    string reset_password_code = 16;
    Text text = 17;
}

message UserResponse {
    User user = 1;
    repeated User users = 2;
    int64 users_amount = 3;
    Token token = 4;
    repeated Token tokens = 5;
    map<string, string> public_keys = 6;
    ActiveMeasurement active_measurement = 7;
    Config config = 8;
    ActiveHistory active_history = 9;
    LoginSession login_session = 10;
    Text text = 11;
    repeated Text texts = 12;
}