// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package go_hera

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	Heartbeat(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error)
	CreateUser(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error)
	UpdateUserMetadata(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error)
	UpdateUserProfile(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error)
	UpdateUserContact(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error)
	UpdateUserPassword(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error)
	SearchForUser(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error)
	GetUser(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error)
	ListUsers(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error)
	ValidateCredentials(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error)
	Login(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error)
	DeleteUser(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error)
	DeleteUsers(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error)
	CreateTokenPair(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error)
	ValidateToken(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error)
	BlockToken(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error)
	RefreshToken(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error)
	GetTokens(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error)
	PublicKeys(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error)
	SendVerificationEmail(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error)
	VerifyEmail(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error)
	SendVerificationText(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error)
	VerifyPhone(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error)
	SendResetPasswordEmail(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error)
	SendResetPasswordText(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error)
	ResetPassword(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error)
	DeleteNamespace(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error)
	CreateNamespace(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error)
	RegisterRsaKey(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error)
	RemovePublicKey(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error)
	GetConfig(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error)
	UpdateConfig(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error)
	DeleteConfig(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Heartbeat(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error) {
	out := new(HeraResponse)
	err := c.cc.Invoke(ctx, "/Hera.Service/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CreateUser(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error) {
	out := new(HeraResponse)
	err := c.cc.Invoke(ctx, "/Hera.Service/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateUserMetadata(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error) {
	out := new(HeraResponse)
	err := c.cc.Invoke(ctx, "/Hera.Service/UpdateUserMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateUserProfile(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error) {
	out := new(HeraResponse)
	err := c.cc.Invoke(ctx, "/Hera.Service/UpdateUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateUserContact(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error) {
	out := new(HeraResponse)
	err := c.cc.Invoke(ctx, "/Hera.Service/UpdateUserContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateUserPassword(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error) {
	out := new(HeraResponse)
	err := c.cc.Invoke(ctx, "/Hera.Service/UpdateUserPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SearchForUser(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error) {
	out := new(HeraResponse)
	err := c.cc.Invoke(ctx, "/Hera.Service/SearchForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetUser(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error) {
	out := new(HeraResponse)
	err := c.cc.Invoke(ctx, "/Hera.Service/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ListUsers(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error) {
	out := new(HeraResponse)
	err := c.cc.Invoke(ctx, "/Hera.Service/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ValidateCredentials(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error) {
	out := new(HeraResponse)
	err := c.cc.Invoke(ctx, "/Hera.Service/ValidateCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Login(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error) {
	out := new(HeraResponse)
	err := c.cc.Invoke(ctx, "/Hera.Service/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteUser(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error) {
	out := new(HeraResponse)
	err := c.cc.Invoke(ctx, "/Hera.Service/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteUsers(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error) {
	out := new(HeraResponse)
	err := c.cc.Invoke(ctx, "/Hera.Service/DeleteUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CreateTokenPair(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error) {
	out := new(HeraResponse)
	err := c.cc.Invoke(ctx, "/Hera.Service/CreateTokenPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ValidateToken(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error) {
	out := new(HeraResponse)
	err := c.cc.Invoke(ctx, "/Hera.Service/ValidateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) BlockToken(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error) {
	out := new(HeraResponse)
	err := c.cc.Invoke(ctx, "/Hera.Service/BlockToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) RefreshToken(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error) {
	out := new(HeraResponse)
	err := c.cc.Invoke(ctx, "/Hera.Service/RefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetTokens(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error) {
	out := new(HeraResponse)
	err := c.cc.Invoke(ctx, "/Hera.Service/GetTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PublicKeys(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error) {
	out := new(HeraResponse)
	err := c.cc.Invoke(ctx, "/Hera.Service/PublicKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SendVerificationEmail(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error) {
	out := new(HeraResponse)
	err := c.cc.Invoke(ctx, "/Hera.Service/SendVerificationEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) VerifyEmail(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error) {
	out := new(HeraResponse)
	err := c.cc.Invoke(ctx, "/Hera.Service/VerifyEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SendVerificationText(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error) {
	out := new(HeraResponse)
	err := c.cc.Invoke(ctx, "/Hera.Service/SendVerificationText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) VerifyPhone(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error) {
	out := new(HeraResponse)
	err := c.cc.Invoke(ctx, "/Hera.Service/VerifyPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SendResetPasswordEmail(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error) {
	out := new(HeraResponse)
	err := c.cc.Invoke(ctx, "/Hera.Service/SendResetPasswordEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SendResetPasswordText(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error) {
	out := new(HeraResponse)
	err := c.cc.Invoke(ctx, "/Hera.Service/SendResetPasswordText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ResetPassword(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error) {
	out := new(HeraResponse)
	err := c.cc.Invoke(ctx, "/Hera.Service/ResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteNamespace(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error) {
	out := new(HeraResponse)
	err := c.cc.Invoke(ctx, "/Hera.Service/DeleteNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CreateNamespace(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error) {
	out := new(HeraResponse)
	err := c.cc.Invoke(ctx, "/Hera.Service/CreateNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) RegisterRsaKey(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error) {
	out := new(HeraResponse)
	err := c.cc.Invoke(ctx, "/Hera.Service/RegisterRsaKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) RemovePublicKey(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error) {
	out := new(HeraResponse)
	err := c.cc.Invoke(ctx, "/Hera.Service/RemovePublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetConfig(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error) {
	out := new(HeraResponse)
	err := c.cc.Invoke(ctx, "/Hera.Service/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateConfig(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error) {
	out := new(HeraResponse)
	err := c.cc.Invoke(ctx, "/Hera.Service/UpdateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteConfig(ctx context.Context, in *HeraRequest, opts ...grpc.CallOption) (*HeraResponse, error) {
	out := new(HeraResponse)
	err := c.cc.Invoke(ctx, "/Hera.Service/DeleteConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations should embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	Heartbeat(context.Context, *HeraRequest) (*HeraResponse, error)
	CreateUser(context.Context, *HeraRequest) (*HeraResponse, error)
	UpdateUserMetadata(context.Context, *HeraRequest) (*HeraResponse, error)
	UpdateUserProfile(context.Context, *HeraRequest) (*HeraResponse, error)
	UpdateUserContact(context.Context, *HeraRequest) (*HeraResponse, error)
	UpdateUserPassword(context.Context, *HeraRequest) (*HeraResponse, error)
	SearchForUser(context.Context, *HeraRequest) (*HeraResponse, error)
	GetUser(context.Context, *HeraRequest) (*HeraResponse, error)
	ListUsers(context.Context, *HeraRequest) (*HeraResponse, error)
	ValidateCredentials(context.Context, *HeraRequest) (*HeraResponse, error)
	Login(context.Context, *HeraRequest) (*HeraResponse, error)
	DeleteUser(context.Context, *HeraRequest) (*HeraResponse, error)
	DeleteUsers(context.Context, *HeraRequest) (*HeraResponse, error)
	CreateTokenPair(context.Context, *HeraRequest) (*HeraResponse, error)
	ValidateToken(context.Context, *HeraRequest) (*HeraResponse, error)
	BlockToken(context.Context, *HeraRequest) (*HeraResponse, error)
	RefreshToken(context.Context, *HeraRequest) (*HeraResponse, error)
	GetTokens(context.Context, *HeraRequest) (*HeraResponse, error)
	PublicKeys(context.Context, *HeraRequest) (*HeraResponse, error)
	SendVerificationEmail(context.Context, *HeraRequest) (*HeraResponse, error)
	VerifyEmail(context.Context, *HeraRequest) (*HeraResponse, error)
	SendVerificationText(context.Context, *HeraRequest) (*HeraResponse, error)
	VerifyPhone(context.Context, *HeraRequest) (*HeraResponse, error)
	SendResetPasswordEmail(context.Context, *HeraRequest) (*HeraResponse, error)
	SendResetPasswordText(context.Context, *HeraRequest) (*HeraResponse, error)
	ResetPassword(context.Context, *HeraRequest) (*HeraResponse, error)
	DeleteNamespace(context.Context, *HeraRequest) (*HeraResponse, error)
	CreateNamespace(context.Context, *HeraRequest) (*HeraResponse, error)
	RegisterRsaKey(context.Context, *HeraRequest) (*HeraResponse, error)
	RemovePublicKey(context.Context, *HeraRequest) (*HeraResponse, error)
	GetConfig(context.Context, *HeraRequest) (*HeraResponse, error)
	UpdateConfig(context.Context, *HeraRequest) (*HeraResponse, error)
	DeleteConfig(context.Context, *HeraRequest) (*HeraResponse, error)
}

// UnimplementedServiceServer should be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) Heartbeat(context.Context, *HeraRequest) (*HeraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedServiceServer) CreateUser(context.Context, *HeraRequest) (*HeraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedServiceServer) UpdateUserMetadata(context.Context, *HeraRequest) (*HeraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserMetadata not implemented")
}
func (UnimplementedServiceServer) UpdateUserProfile(context.Context, *HeraRequest) (*HeraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProfile not implemented")
}
func (UnimplementedServiceServer) UpdateUserContact(context.Context, *HeraRequest) (*HeraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserContact not implemented")
}
func (UnimplementedServiceServer) UpdateUserPassword(context.Context, *HeraRequest) (*HeraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPassword not implemented")
}
func (UnimplementedServiceServer) SearchForUser(context.Context, *HeraRequest) (*HeraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchForUser not implemented")
}
func (UnimplementedServiceServer) GetUser(context.Context, *HeraRequest) (*HeraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedServiceServer) ListUsers(context.Context, *HeraRequest) (*HeraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedServiceServer) ValidateCredentials(context.Context, *HeraRequest) (*HeraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateCredentials not implemented")
}
func (UnimplementedServiceServer) Login(context.Context, *HeraRequest) (*HeraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedServiceServer) DeleteUser(context.Context, *HeraRequest) (*HeraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedServiceServer) DeleteUsers(context.Context, *HeraRequest) (*HeraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUsers not implemented")
}
func (UnimplementedServiceServer) CreateTokenPair(context.Context, *HeraRequest) (*HeraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTokenPair not implemented")
}
func (UnimplementedServiceServer) ValidateToken(context.Context, *HeraRequest) (*HeraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}
func (UnimplementedServiceServer) BlockToken(context.Context, *HeraRequest) (*HeraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockToken not implemented")
}
func (UnimplementedServiceServer) RefreshToken(context.Context, *HeraRequest) (*HeraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedServiceServer) GetTokens(context.Context, *HeraRequest) (*HeraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokens not implemented")
}
func (UnimplementedServiceServer) PublicKeys(context.Context, *HeraRequest) (*HeraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicKeys not implemented")
}
func (UnimplementedServiceServer) SendVerificationEmail(context.Context, *HeraRequest) (*HeraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendVerificationEmail not implemented")
}
func (UnimplementedServiceServer) VerifyEmail(context.Context, *HeraRequest) (*HeraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (UnimplementedServiceServer) SendVerificationText(context.Context, *HeraRequest) (*HeraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendVerificationText not implemented")
}
func (UnimplementedServiceServer) VerifyPhone(context.Context, *HeraRequest) (*HeraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPhone not implemented")
}
func (UnimplementedServiceServer) SendResetPasswordEmail(context.Context, *HeraRequest) (*HeraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendResetPasswordEmail not implemented")
}
func (UnimplementedServiceServer) SendResetPasswordText(context.Context, *HeraRequest) (*HeraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendResetPasswordText not implemented")
}
func (UnimplementedServiceServer) ResetPassword(context.Context, *HeraRequest) (*HeraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedServiceServer) DeleteNamespace(context.Context, *HeraRequest) (*HeraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespace not implemented")
}
func (UnimplementedServiceServer) CreateNamespace(context.Context, *HeraRequest) (*HeraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNamespace not implemented")
}
func (UnimplementedServiceServer) RegisterRsaKey(context.Context, *HeraRequest) (*HeraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterRsaKey not implemented")
}
func (UnimplementedServiceServer) RemovePublicKey(context.Context, *HeraRequest) (*HeraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePublicKey not implemented")
}
func (UnimplementedServiceServer) GetConfig(context.Context, *HeraRequest) (*HeraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedServiceServer) UpdateConfig(context.Context, *HeraRequest) (*HeraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfig not implemented")
}
func (UnimplementedServiceServer) DeleteConfig(context.Context, *HeraRequest) (*HeraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfig not implemented")
}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hera.Service/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Heartbeat(ctx, req.(*HeraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hera.Service/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CreateUser(ctx, req.(*HeraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateUserMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateUserMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hera.Service/UpdateUserMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateUserMetadata(ctx, req.(*HeraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hera.Service/UpdateUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateUserProfile(ctx, req.(*HeraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateUserContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateUserContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hera.Service/UpdateUserContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateUserContact(ctx, req.(*HeraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hera.Service/UpdateUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateUserPassword(ctx, req.(*HeraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_SearchForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).SearchForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hera.Service/SearchForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).SearchForUser(ctx, req.(*HeraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hera.Service/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetUser(ctx, req.(*HeraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hera.Service/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ListUsers(ctx, req.(*HeraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ValidateCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ValidateCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hera.Service/ValidateCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ValidateCredentials(ctx, req.(*HeraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hera.Service/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Login(ctx, req.(*HeraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hera.Service/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteUser(ctx, req.(*HeraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hera.Service/DeleteUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteUsers(ctx, req.(*HeraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CreateTokenPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CreateTokenPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hera.Service/CreateTokenPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CreateTokenPair(ctx, req.(*HeraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hera.Service/ValidateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ValidateToken(ctx, req.(*HeraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_BlockToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).BlockToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hera.Service/BlockToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).BlockToken(ctx, req.(*HeraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hera.Service/RefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).RefreshToken(ctx, req.(*HeraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hera.Service/GetTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetTokens(ctx, req.(*HeraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PublicKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PublicKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hera.Service/PublicKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PublicKeys(ctx, req.(*HeraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_SendVerificationEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).SendVerificationEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hera.Service/SendVerificationEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).SendVerificationEmail(ctx, req.(*HeraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hera.Service/VerifyEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).VerifyEmail(ctx, req.(*HeraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_SendVerificationText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).SendVerificationText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hera.Service/SendVerificationText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).SendVerificationText(ctx, req.(*HeraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_VerifyPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).VerifyPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hera.Service/VerifyPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).VerifyPhone(ctx, req.(*HeraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_SendResetPasswordEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).SendResetPasswordEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hera.Service/SendResetPasswordEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).SendResetPasswordEmail(ctx, req.(*HeraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_SendResetPasswordText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).SendResetPasswordText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hera.Service/SendResetPasswordText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).SendResetPasswordText(ctx, req.(*HeraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hera.Service/ResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ResetPassword(ctx, req.(*HeraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hera.Service/DeleteNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteNamespace(ctx, req.(*HeraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CreateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CreateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hera.Service/CreateNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CreateNamespace(ctx, req.(*HeraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_RegisterRsaKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).RegisterRsaKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hera.Service/RegisterRsaKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).RegisterRsaKey(ctx, req.(*HeraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_RemovePublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).RemovePublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hera.Service/RemovePublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).RemovePublicKey(ctx, req.(*HeraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hera.Service/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetConfig(ctx, req.(*HeraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hera.Service/UpdateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateConfig(ctx, req.(*HeraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hera.Service/DeleteConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteConfig(ctx, req.(*HeraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Hera.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heartbeat",
			Handler:    _Service_Heartbeat_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Service_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUserMetadata",
			Handler:    _Service_UpdateUserMetadata_Handler,
		},
		{
			MethodName: "UpdateUserProfile",
			Handler:    _Service_UpdateUserProfile_Handler,
		},
		{
			MethodName: "UpdateUserContact",
			Handler:    _Service_UpdateUserContact_Handler,
		},
		{
			MethodName: "UpdateUserPassword",
			Handler:    _Service_UpdateUserPassword_Handler,
		},
		{
			MethodName: "SearchForUser",
			Handler:    _Service_SearchForUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Service_GetUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _Service_ListUsers_Handler,
		},
		{
			MethodName: "ValidateCredentials",
			Handler:    _Service_ValidateCredentials_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Service_Login_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Service_DeleteUser_Handler,
		},
		{
			MethodName: "DeleteUsers",
			Handler:    _Service_DeleteUsers_Handler,
		},
		{
			MethodName: "CreateTokenPair",
			Handler:    _Service_CreateTokenPair_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _Service_ValidateToken_Handler,
		},
		{
			MethodName: "BlockToken",
			Handler:    _Service_BlockToken_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _Service_RefreshToken_Handler,
		},
		{
			MethodName: "GetTokens",
			Handler:    _Service_GetTokens_Handler,
		},
		{
			MethodName: "PublicKeys",
			Handler:    _Service_PublicKeys_Handler,
		},
		{
			MethodName: "SendVerificationEmail",
			Handler:    _Service_SendVerificationEmail_Handler,
		},
		{
			MethodName: "VerifyEmail",
			Handler:    _Service_VerifyEmail_Handler,
		},
		{
			MethodName: "SendVerificationText",
			Handler:    _Service_SendVerificationText_Handler,
		},
		{
			MethodName: "VerifyPhone",
			Handler:    _Service_VerifyPhone_Handler,
		},
		{
			MethodName: "SendResetPasswordEmail",
			Handler:    _Service_SendResetPasswordEmail_Handler,
		},
		{
			MethodName: "SendResetPasswordText",
			Handler:    _Service_SendResetPasswordText_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _Service_ResetPassword_Handler,
		},
		{
			MethodName: "DeleteNamespace",
			Handler:    _Service_DeleteNamespace_Handler,
		},
		{
			MethodName: "CreateNamespace",
			Handler:    _Service_CreateNamespace_Handler,
		},
		{
			MethodName: "RegisterRsaKey",
			Handler:    _Service_RegisterRsaKey_Handler,
		},
		{
			MethodName: "RemovePublicKey",
			Handler:    _Service_RemovePublicKey_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _Service_GetConfig_Handler,
		},
		{
			MethodName: "UpdateConfig",
			Handler:    _Service_UpdateConfig_Handler,
		},
		{
			MethodName: "DeleteConfig",
			Handler:    _Service_DeleteConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hera.proto",
}
