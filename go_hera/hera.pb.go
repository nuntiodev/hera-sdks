// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: hera.proto

package go_hera

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LanguageCode int32

const (
	LanguageCode_INVALID_LANGUAGE_CODE LanguageCode = 0
	LanguageCode_EN                    LanguageCode = 1
	LanguageCode_DK                    LanguageCode = 2
)

// Enum value maps for LanguageCode.
var (
	LanguageCode_name = map[int32]string{
		0: "INVALID_LANGUAGE_CODE",
		1: "EN",
		2: "DK",
	}
	LanguageCode_value = map[string]int32{
		"INVALID_LANGUAGE_CODE": 0,
		"EN":                    1,
		"DK":                    2,
	}
)

func (x LanguageCode) Enum() *LanguageCode {
	p := new(LanguageCode)
	*p = x
	return p
}

func (x LanguageCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LanguageCode) Descriptor() protoreflect.EnumDescriptor {
	return file_hera_proto_enumTypes[0].Descriptor()
}

func (LanguageCode) Type() protoreflect.EnumType {
	return &file_hera_proto_enumTypes[0]
}

func (x LanguageCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LanguageCode.Descriptor instead.
func (LanguageCode) EnumDescriptor() ([]byte, []int) {
	return file_hera_proto_rawDescGZIP(), []int{0}
}

type HasingAlgorithm int32

const (
	HasingAlgorithm_INVALID_HASHING_ALGORITHM HasingAlgorithm = 0
	HasingAlgorithm_BCRYPT                    HasingAlgorithm = 1
	HasingAlgorithm_SCRYPT                    HasingAlgorithm = 2
)

// Enum value maps for HasingAlgorithm.
var (
	HasingAlgorithm_name = map[int32]string{
		0: "INVALID_HASHING_ALGORITHM",
		1: "BCRYPT",
		2: "SCRYPT",
	}
	HasingAlgorithm_value = map[string]int32{
		"INVALID_HASHING_ALGORITHM": 0,
		"BCRYPT":                    1,
		"SCRYPT":                    2,
	}
)

func (x HasingAlgorithm) Enum() *HasingAlgorithm {
	p := new(HasingAlgorithm)
	*p = x
	return p
}

func (x HasingAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HasingAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_hera_proto_enumTypes[1].Descriptor()
}

func (HasingAlgorithm) Type() protoreflect.EnumType {
	return &file_hera_proto_enumTypes[1]
}

func (x HasingAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HasingAlgorithm.Descriptor instead.
func (HasingAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_hera_proto_rawDescGZIP(), []int{1}
}

type TokenType int32

const (
	TokenType_TOKEN_TYPE_INVALID TokenType = 0
	TokenType_TOKEN_TYPE_ACCESS  TokenType = 1
	TokenType_TOKEN_TYPE_REFRESH TokenType = 2
)

// Enum value maps for TokenType.
var (
	TokenType_name = map[int32]string{
		0: "TOKEN_TYPE_INVALID",
		1: "TOKEN_TYPE_ACCESS",
		2: "TOKEN_TYPE_REFRESH",
	}
	TokenType_value = map[string]int32{
		"TOKEN_TYPE_INVALID": 0,
		"TOKEN_TYPE_ACCESS":  1,
		"TOKEN_TYPE_REFRESH": 2,
	}
)

func (x TokenType) Enum() *TokenType {
	p := new(TokenType)
	*p = x
	return p
}

func (x TokenType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TokenType) Descriptor() protoreflect.EnumDescriptor {
	return file_hera_proto_enumTypes[2].Descriptor()
}

func (TokenType) Type() protoreflect.EnumType {
	return &file_hera_proto_enumTypes[2]
}

func (x TokenType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TokenType.Descriptor instead.
func (TokenType) EnumDescriptor() ([]byte, []int) {
	return file_hera_proto_rawDescGZIP(), []int{2}
}

type LoginStatus int32

const (
	LoginStatus_AUTHENTICATED         LoginStatus = 0
	LoginStatus_NOT_AUTHENTICATED     LoginStatus = 1
	LoginStatus_EMAIL_IS_NOT_VERIFIED LoginStatus = 2
)

// Enum value maps for LoginStatus.
var (
	LoginStatus_name = map[int32]string{
		0: "AUTHENTICATED",
		1: "NOT_AUTHENTICATED",
		2: "EMAIL_IS_NOT_VERIFIED",
	}
	LoginStatus_value = map[string]int32{
		"AUTHENTICATED":         0,
		"NOT_AUTHENTICATED":     1,
		"EMAIL_IS_NOT_VERIFIED": 2,
	}
)

func (x LoginStatus) Enum() *LoginStatus {
	p := new(LoginStatus)
	*p = x
	return p
}

func (x LoginStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoginStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_hera_proto_enumTypes[3].Descriptor()
}

func (LoginStatus) Type() protoreflect.EnumType {
	return &file_hera_proto_enumTypes[3]
}

func (x LoginStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoginStatus.Descriptor instead.
func (LoginStatus) EnumDescriptor() ([]byte, []int) {
	return file_hera_proto_rawDescGZIP(), []int{3}
}

type LoginType int32

const (
	LoginType_NOTHING                 LoginType = 0
	LoginType_EMAIL_PASSWORD          LoginType = 1
	LoginType_PHONE_PASSWORD          LoginType = 2
	LoginType_USERNAME_PASSWORD       LoginType = 3
	LoginType_EMAIL_VERIFICATION_CODE LoginType = 4
	LoginType_PHONE_VERIFICATION_CODE LoginType = 5
)

// Enum value maps for LoginType.
var (
	LoginType_name = map[int32]string{
		0: "NOTHING",
		1: "EMAIL_PASSWORD",
		2: "PHONE_PASSWORD",
		3: "USERNAME_PASSWORD",
		4: "EMAIL_VERIFICATION_CODE",
		5: "PHONE_VERIFICATION_CODE",
	}
	LoginType_value = map[string]int32{
		"NOTHING":                 0,
		"EMAIL_PASSWORD":          1,
		"PHONE_PASSWORD":          2,
		"USERNAME_PASSWORD":       3,
		"EMAIL_VERIFICATION_CODE": 4,
		"PHONE_VERIFICATION_CODE": 5,
	}
)

func (x LoginType) Enum() *LoginType {
	p := new(LoginType)
	*p = x
	return p
}

func (x LoginType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoginType) Descriptor() protoreflect.EnumDescriptor {
	return file_hera_proto_enumTypes[4].Descriptor()
}

func (LoginType) Type() protoreflect.EnumType {
	return &file_hera_proto_enumTypes[4]
}

func (x LoginType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoginType.Descriptor instead.
func (LoginType) EnumDescriptor() ([]byte, []int) {
	return file_hera_proto_rawDescGZIP(), []int{4}
}

type Query_SortBy int32

const (
	Query_CREATED_AT Query_SortBy = 0
	Query_UPDATE_AT  Query_SortBy = 1
)

// Enum value maps for Query_SortBy.
var (
	Query_SortBy_name = map[int32]string{
		0: "CREATED_AT",
		1: "UPDATE_AT",
	}
	Query_SortBy_value = map[string]int32{
		"CREATED_AT": 0,
		"UPDATE_AT":  1,
	}
)

func (x Query_SortBy) Enum() *Query_SortBy {
	p := new(Query_SortBy)
	*p = x
	return p
}

func (x Query_SortBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Query_SortBy) Descriptor() protoreflect.EnumDescriptor {
	return file_hera_proto_enumTypes[5].Descriptor()
}

func (Query_SortBy) Type() protoreflect.EnumType {
	return &file_hera_proto_enumTypes[5]
}

func (x Query_SortBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Query_SortBy.Descriptor instead.
func (Query_SortBy) EnumDescriptor() ([]byte, []int) {
	return file_hera_proto_rawDescGZIP(), []int{4, 0}
}

type Query_Order int32

const (
	Query_INC Query_Order = 0
	Query_DEC Query_Order = 1
)

// Enum value maps for Query_Order.
var (
	Query_Order_name = map[int32]string{
		0: "INC",
		1: "DEC",
	}
	Query_Order_value = map[string]int32{
		"INC": 0,
		"DEC": 1,
	}
)

func (x Query_Order) Enum() *Query_Order {
	p := new(Query_Order)
	*p = x
	return p
}

func (x Query_Order) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Query_Order) Descriptor() protoreflect.EnumDescriptor {
	return file_hera_proto_enumTypes[6].Descriptor()
}

func (Query_Order) Type() protoreflect.EnumType {
	return &file_hera_proto_enumTypes[6]
}

func (x Query_Order) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Query_Order.Descriptor instead.
func (Query_Order) EnumDescriptor() ([]byte, []int) {
	return file_hera_proto_rawDescGZIP(), []int{4, 1}
}

type Bcrypt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cost int32 `protobuf:"varint,1,opt,name=cost,proto3" json:"cost,omitempty"`
}

func (x *Bcrypt) Reset() {
	*x = Bcrypt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hera_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bcrypt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bcrypt) ProtoMessage() {}

func (x *Bcrypt) ProtoReflect() protoreflect.Message {
	mi := &file_hera_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bcrypt.ProtoReflect.Descriptor instead.
func (*Bcrypt) Descriptor() ([]byte, []int) {
	return file_hera_proto_rawDescGZIP(), []int{0}
}

func (x *Bcrypt) GetCost() int32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

type Scrypt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignerKey     string `protobuf:"bytes,1,opt,name=signer_key,json=signerKey,proto3" json:"signer_key,omitempty"`
	SaltSeparator string `protobuf:"bytes,2,opt,name=salt_separator,json=saltSeparator,proto3" json:"salt_separator,omitempty"`
	Rounds        int32  `protobuf:"varint,3,opt,name=rounds,proto3" json:"rounds,omitempty"`
	MemCost       int32  `protobuf:"varint,4,opt,name=mem_cost,json=memCost,proto3" json:"mem_cost,omitempty"`
	P             int32  `protobuf:"varint,5,opt,name=p,proto3" json:"p,omitempty"`
	KeyLen        int32  `protobuf:"varint,6,opt,name=key_len,json=keyLen,proto3" json:"key_len,omitempty"`
}

func (x *Scrypt) Reset() {
	*x = Scrypt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hera_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scrypt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scrypt) ProtoMessage() {}

func (x *Scrypt) ProtoReflect() protoreflect.Message {
	mi := &file_hera_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scrypt.ProtoReflect.Descriptor instead.
func (*Scrypt) Descriptor() ([]byte, []int) {
	return file_hera_proto_rawDescGZIP(), []int{1}
}

func (x *Scrypt) GetSignerKey() string {
	if x != nil {
		return x.SignerKey
	}
	return ""
}

func (x *Scrypt) GetSaltSeparator() string {
	if x != nil {
		return x.SaltSeparator
	}
	return ""
}

func (x *Scrypt) GetRounds() int32 {
	if x != nil {
		return x.Rounds
	}
	return 0
}

func (x *Scrypt) GetMemCost() int32 {
	if x != nil {
		return x.MemCost
	}
	return 0
}

func (x *Scrypt) GetP() int32 {
	if x != nil {
		return x.P
	}
	return 0
}

func (x *Scrypt) GetKeyLen() int32 {
	if x != nil {
		return x.KeyLen
	}
	return 0
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                     string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Logo                     string                 `protobuf:"bytes,2,opt,name=logo,proto3" json:"logo,omitempty"`
	DisableSignup            bool                   `protobuf:"varint,3,opt,name=disable_signup,json=disableSignup,proto3" json:"disable_signup,omitempty"`
	DisableLogin             bool                   `protobuf:"varint,4,opt,name=disable_login,json=disableLogin,proto3" json:"disable_login,omitempty"`
	CreatedAt                *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt                *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	ValidatePassword         bool                   `protobuf:"varint,7,opt,name=validate_password,json=validatePassword,proto3" json:"validate_password,omitempty"`
	VerifyEmail              bool                   `protobuf:"varint,8,opt,name=verify_email,json=verifyEmail,proto3" json:"verify_email,omitempty"`
	SupportedLoginMechanisms []LoginType            `protobuf:"varint,9,rep,packed,name=supported_login_mechanisms,json=supportedLoginMechanisms,proto3,enum=Hera.LoginType" json:"supported_login_mechanisms,omitempty"`
	VerifyPhone              bool                   `protobuf:"varint,10,opt,name=verify_phone,json=verifyPhone,proto3" json:"verify_phone,omitempty"`
	PublicKey                string                 `protobuf:"bytes,11,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Roles                    []string               `protobuf:"bytes,12,rep,name=roles,proto3" json:"roles,omitempty"`
	HasingAlgorithm          HasingAlgorithm        `protobuf:"varint,13,opt,name=hasing_algorithm,json=hasingAlgorithm,proto3,enum=Hera.HasingAlgorithm" json:"hasing_algorithm,omitempty"`
	Bcrypt                   *Bcrypt                `protobuf:"bytes,14,opt,name=bcrypt,proto3" json:"bcrypt,omitempty"`
	Scrypt                   *Scrypt                `protobuf:"bytes,15,opt,name=scrypt,proto3" json:"scrypt,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hera_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_hera_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_hera_proto_rawDescGZIP(), []int{2}
}

func (x *Config) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Config) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *Config) GetDisableSignup() bool {
	if x != nil {
		return x.DisableSignup
	}
	return false
}

func (x *Config) GetDisableLogin() bool {
	if x != nil {
		return x.DisableLogin
	}
	return false
}

func (x *Config) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Config) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Config) GetValidatePassword() bool {
	if x != nil {
		return x.ValidatePassword
	}
	return false
}

func (x *Config) GetVerifyEmail() bool {
	if x != nil {
		return x.VerifyEmail
	}
	return false
}

func (x *Config) GetSupportedLoginMechanisms() []LoginType {
	if x != nil {
		return x.SupportedLoginMechanisms
	}
	return nil
}

func (x *Config) GetVerifyPhone() bool {
	if x != nil {
		return x.VerifyPhone
	}
	return false
}

func (x *Config) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *Config) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *Config) GetHasingAlgorithm() HasingAlgorithm {
	if x != nil {
		return x.HasingAlgorithm
	}
	return HasingAlgorithm_INVALID_HASHING_ALGORITHM
}

func (x *Config) GetBcrypt() *Bcrypt {
	if x != nil {
		return x.Bcrypt
	}
	return nil
}

func (x *Config) GetScrypt() *Scrypt {
	if x != nil {
		return x.Scrypt
	}
	return nil
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Username                   *string                `protobuf:"bytes,2,opt,name=username,proto3,oneof" json:"username,omitempty"`
	Email                      *string                `protobuf:"bytes,3,opt,name=email,proto3,oneof" json:"email,omitempty"`
	Password                   string                 `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	Image                      *string                `protobuf:"bytes,5,opt,name=image,proto3,oneof" json:"image,omitempty"`
	Metadata                   string                 `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
	CreatedAt                  *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt                  *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	FirstName                  *string                `protobuf:"bytes,9,opt,name=first_name,json=firstName,proto3,oneof" json:"first_name,omitempty"`
	LastName                   *string                `protobuf:"bytes,10,opt,name=last_name,json=lastName,proto3,oneof" json:"last_name,omitempty"`
	Birthdate                  *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=birthdate,proto3,oneof" json:"birthdate,omitempty"`
	VerificationEmailSentAt    *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=verification_email_sent_at,json=verificationEmailSentAt,proto3" json:"verification_email_sent_at,omitempty"`
	EmailVerificationCode      string                 `protobuf:"bytes,13,opt,name=email_verification_code,json=emailVerificationCode,proto3" json:"email_verification_code,omitempty"`
	VerificationEmailExpiresAt *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=verification_email_expires_at,json=verificationEmailExpiresAt,proto3" json:"verification_email_expires_at,omitempty"`
	VerifyEmailAttempts        int32                  `protobuf:"varint,15,opt,name=verify_email_attempts,json=verifyEmailAttempts,proto3" json:"verify_email_attempts,omitempty"`
	ResetPasswordCode          string                 `protobuf:"bytes,16,opt,name=reset_password_code,json=resetPasswordCode,proto3" json:"reset_password_code,omitempty"`
	ResetPasswordCodeSentAt    *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=reset_password_code_sent_at,json=resetPasswordCodeSentAt,proto3" json:"reset_password_code_sent_at,omitempty"`
	ResetPasswordCodeExpiresAt *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=reset_password_code_expires_at,json=resetPasswordCodeExpiresAt,proto3" json:"reset_password_code_expires_at,omitempty"`
	ResetPasswordAttempts      int32                  `protobuf:"varint,19,opt,name=reset_password_attempts,json=resetPasswordAttempts,proto3" json:"reset_password_attempts,omitempty"`
	VerifiedEmails             []string               `protobuf:"bytes,20,rep,name=verified_emails,json=verifiedEmails,proto3" json:"verified_emails,omitempty"`
	EmailHash                  string                 `protobuf:"bytes,21,opt,name=email_hash,json=emailHash,proto3" json:"email_hash,omitempty"`
	Phone                      *string                `protobuf:"bytes,22,opt,name=phone,proto3,oneof" json:"phone,omitempty"`
	PhoneHash                  string                 `protobuf:"bytes,23,opt,name=phone_hash,json=phoneHash,proto3" json:"phone_hash,omitempty"`
	VerificationTextSentAt     *timestamppb.Timestamp `protobuf:"bytes,24,opt,name=verification_text_sent_at,json=verificationTextSentAt,proto3" json:"verification_text_sent_at,omitempty"`
	PhoneVerificationCode      string                 `protobuf:"bytes,25,opt,name=phone_verification_code,json=phoneVerificationCode,proto3" json:"phone_verification_code,omitempty"`
	VerifiedPhoneNumbers       []string               `protobuf:"bytes,26,rep,name=verified_phone_numbers,json=verifiedPhoneNumbers,proto3" json:"verified_phone_numbers,omitempty"`
	PreferredLanguage          *LanguageCode          `protobuf:"varint,27,opt,name=preferred_language,json=preferredLanguage,proto3,enum=Hera.LanguageCode,oneof" json:"preferred_language,omitempty"`
	UsernameHash               string                 `protobuf:"bytes,28,opt,name=username_hash,json=usernameHash,proto3" json:"username_hash,omitempty"`
	VerifyPhoneAttempts        int32                  `protobuf:"varint,29,opt,name=verify_phone_attempts,json=verifyPhoneAttempts,proto3" json:"verify_phone_attempts,omitempty"`
	Role                       string                 `protobuf:"bytes,30,opt,name=role,proto3" json:"role,omitempty"`
	Gender                     *string                `protobuf:"bytes,31,opt,name=gender,proto3,oneof" json:"gender,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hera_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_hera_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_hera_proto_rawDescGZIP(), []int{3}
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *User) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *User) GetImage() string {
	if x != nil && x.Image != nil {
		return *x.Image
	}
	return ""
}

func (x *User) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *User) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *User) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *User) GetFirstName() string {
	if x != nil && x.FirstName != nil {
		return *x.FirstName
	}
	return ""
}

func (x *User) GetLastName() string {
	if x != nil && x.LastName != nil {
		return *x.LastName
	}
	return ""
}

func (x *User) GetBirthdate() *timestamppb.Timestamp {
	if x != nil {
		return x.Birthdate
	}
	return nil
}

func (x *User) GetVerificationEmailSentAt() *timestamppb.Timestamp {
	if x != nil {
		return x.VerificationEmailSentAt
	}
	return nil
}

func (x *User) GetEmailVerificationCode() string {
	if x != nil {
		return x.EmailVerificationCode
	}
	return ""
}

func (x *User) GetVerificationEmailExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.VerificationEmailExpiresAt
	}
	return nil
}

func (x *User) GetVerifyEmailAttempts() int32 {
	if x != nil {
		return x.VerifyEmailAttempts
	}
	return 0
}

func (x *User) GetResetPasswordCode() string {
	if x != nil {
		return x.ResetPasswordCode
	}
	return ""
}

func (x *User) GetResetPasswordCodeSentAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ResetPasswordCodeSentAt
	}
	return nil
}

func (x *User) GetResetPasswordCodeExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ResetPasswordCodeExpiresAt
	}
	return nil
}

func (x *User) GetResetPasswordAttempts() int32 {
	if x != nil {
		return x.ResetPasswordAttempts
	}
	return 0
}

func (x *User) GetVerifiedEmails() []string {
	if x != nil {
		return x.VerifiedEmails
	}
	return nil
}

func (x *User) GetEmailHash() string {
	if x != nil {
		return x.EmailHash
	}
	return ""
}

func (x *User) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

func (x *User) GetPhoneHash() string {
	if x != nil {
		return x.PhoneHash
	}
	return ""
}

func (x *User) GetVerificationTextSentAt() *timestamppb.Timestamp {
	if x != nil {
		return x.VerificationTextSentAt
	}
	return nil
}

func (x *User) GetPhoneVerificationCode() string {
	if x != nil {
		return x.PhoneVerificationCode
	}
	return ""
}

func (x *User) GetVerifiedPhoneNumbers() []string {
	if x != nil {
		return x.VerifiedPhoneNumbers
	}
	return nil
}

func (x *User) GetPreferredLanguage() LanguageCode {
	if x != nil && x.PreferredLanguage != nil {
		return *x.PreferredLanguage
	}
	return LanguageCode_INVALID_LANGUAGE_CODE
}

func (x *User) GetUsernameHash() string {
	if x != nil {
		return x.UsernameHash
	}
	return ""
}

func (x *User) GetVerifyPhoneAttempts() int32 {
	if x != nil {
		return x.VerifyPhoneAttempts
	}
	return 0
}

func (x *User) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *User) GetGender() string {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return ""
}

type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From   int32        `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	To     int32        `protobuf:"varint,2,opt,name=to,proto3" json:"to,omitempty"`
	Sort   Query_SortBy `protobuf:"varint,3,opt,name=sort,proto3,enum=Hera.Query_SortBy" json:"sort,omitempty"`
	Order  Query_Order  `protobuf:"varint,4,opt,name=order,proto3,enum=Hera.Query_Order" json:"order,omitempty"`
	Search string       `protobuf:"bytes,5,opt,name=search,proto3" json:"search,omitempty"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hera_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_hera_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_hera_proto_rawDescGZIP(), []int{4}
}

func (x *Query) GetFrom() int32 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *Query) GetTo() int32 {
	if x != nil {
		return x.To
	}
	return 0
}

func (x *Query) GetSort() Query_SortBy {
	if x != nil {
		return x.Sort
	}
	return Query_CREATED_AT
}

func (x *Query) GetOrder() Query_Order {
	if x != nil {
		return x.Order
	}
	return Query_INC
}

func (x *Query) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

type Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId       string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Blocked      bool                   `protobuf:"varint,3,opt,name=blocked,proto3" json:"blocked,omitempty"`
	DeviceInfo   string                 `protobuf:"bytes,4,opt,name=device_info,json=deviceInfo,proto3" json:"device_info,omitempty"`
	BlockedAt    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=blocked_at,json=blockedAt,proto3" json:"blocked_at,omitempty"`
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UsedAt       *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=used_at,json=usedAt,proto3" json:"used_at,omitempty"`
	ExpiresAt    *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	AccessToken  string                 `protobuf:"bytes,9,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	RefreshToken string                 `protobuf:"bytes,10,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	LoggedInFrom string                 `protobuf:"bytes,11,opt,name=logged_in_from,json=loggedInFrom,proto3" json:"logged_in_from,omitempty"`
	Type         TokenType              `protobuf:"varint,12,opt,name=type,proto3,enum=Hera.TokenType" json:"type,omitempty"`
}

func (x *Token) Reset() {
	*x = Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hera_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_hera_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_hera_proto_rawDescGZIP(), []int{5}
}

func (x *Token) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Token) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Token) GetBlocked() bool {
	if x != nil {
		return x.Blocked
	}
	return false
}

func (x *Token) GetDeviceInfo() string {
	if x != nil {
		return x.DeviceInfo
	}
	return ""
}

func (x *Token) GetBlockedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.BlockedAt
	}
	return nil
}

func (x *Token) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Token) GetUsedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UsedAt
	}
	return nil
}

func (x *Token) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *Token) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *Token) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *Token) GetLoggedInFrom() string {
	if x != nil {
		return x.LoggedInFrom
	}
	return ""
}

func (x *Token) GetType() TokenType {
	if x != nil {
		return x.Type
	}
	return TokenType_TOKEN_TYPE_INVALID
}

type LoginSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoginStatus    LoginStatus            `protobuf:"varint,1,opt,name=login_status,json=loginStatus,proto3,enum=Hera.LoginStatus" json:"login_status,omitempty"`
	EmailSentAt    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=email_sent_at,json=emailSentAt,proto3" json:"email_sent_at,omitempty"`
	EmailExpiresAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=email_expires_at,json=emailExpiresAt,proto3" json:"email_expires_at,omitempty"`
}

func (x *LoginSession) Reset() {
	*x = LoginSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hera_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginSession) ProtoMessage() {}

func (x *LoginSession) ProtoReflect() protoreflect.Message {
	mi := &file_hera_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginSession.ProtoReflect.Descriptor instead.
func (*LoginSession) Descriptor() ([]byte, []int) {
	return file_hera_proto_rawDescGZIP(), []int{6}
}

func (x *LoginSession) GetLoginStatus() LoginStatus {
	if x != nil {
		return x.LoginStatus
	}
	return LoginStatus_AUTHENTICATED
}

func (x *LoginSession) GetEmailSentAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EmailSentAt
	}
	return nil
}

func (x *LoginSession) GetEmailExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EmailExpiresAt
	}
	return nil
}

type HeraRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User         *User   `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	UserUpdate   *User   `protobuf:"bytes,2,opt,name=user_update,json=userUpdate,proto3" json:"user_update,omitempty"`
	Query        *Query  `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	Namespace    string  `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Users        []*User `protobuf:"bytes,5,rep,name=users,proto3" json:"users,omitempty"`
	Token        *Token  `protobuf:"bytes,6,opt,name=token,proto3" json:"token,omitempty"`
	Config       *Config `protobuf:"bytes,7,opt,name=config,proto3" json:"config,omitempty"`
	CloudToken   string  `protobuf:"bytes,8,opt,name=cloud_token,json=cloudToken,proto3" json:"cloud_token,omitempty"`
	TokenPointer string  `protobuf:"bytes,9,opt,name=token_pointer,json=tokenPointer,proto3" json:"token_pointer,omitempty"`
	PrivateKey   string  `protobuf:"bytes,10,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
}

func (x *HeraRequest) Reset() {
	*x = HeraRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hera_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeraRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeraRequest) ProtoMessage() {}

func (x *HeraRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hera_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeraRequest.ProtoReflect.Descriptor instead.
func (*HeraRequest) Descriptor() ([]byte, []int) {
	return file_hera_proto_rawDescGZIP(), []int{7}
}

func (x *HeraRequest) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *HeraRequest) GetUserUpdate() *User {
	if x != nil {
		return x.UserUpdate
	}
	return nil
}

func (x *HeraRequest) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *HeraRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *HeraRequest) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *HeraRequest) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *HeraRequest) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *HeraRequest) GetCloudToken() string {
	if x != nil {
		return x.CloudToken
	}
	return ""
}

func (x *HeraRequest) GetTokenPointer() string {
	if x != nil {
		return x.TokenPointer
	}
	return ""
}

func (x *HeraRequest) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

type HeraResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User         *User             `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Users        []*User           `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty"`
	Amount       int64             `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Token        *Token            `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	Tokens       []*Token          `protobuf:"bytes,5,rep,name=tokens,proto3" json:"tokens,omitempty"`
	PublicKeys   map[string]string `protobuf:"bytes,6,rep,name=public_keys,json=publicKeys,proto3" json:"public_keys,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Config       *Config           `protobuf:"bytes,7,opt,name=config,proto3" json:"config,omitempty"`
	LoginSession *LoginSession     `protobuf:"bytes,8,opt,name=login_session,json=loginSession,proto3" json:"login_session,omitempty"`
	PrivateKey   string            `protobuf:"bytes,9,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
}

func (x *HeraResponse) Reset() {
	*x = HeraResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hera_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeraResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeraResponse) ProtoMessage() {}

func (x *HeraResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hera_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeraResponse.ProtoReflect.Descriptor instead.
func (*HeraResponse) Descriptor() ([]byte, []int) {
	return file_hera_proto_rawDescGZIP(), []int{8}
}

func (x *HeraResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *HeraResponse) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *HeraResponse) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *HeraResponse) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *HeraResponse) GetTokens() []*Token {
	if x != nil {
		return x.Tokens
	}
	return nil
}

func (x *HeraResponse) GetPublicKeys() map[string]string {
	if x != nil {
		return x.PublicKeys
	}
	return nil
}

func (x *HeraResponse) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *HeraResponse) GetLoginSession() *LoginSession {
	if x != nil {
		return x.LoginSession
	}
	return nil
}

func (x *HeraResponse) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

var File_hera_proto protoreflect.FileDescriptor

var file_hera_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x48, 0x65,
	0x72, 0x61, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x1c, 0x0a, 0x06, 0x42, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x73,
	0x74, 0x22, 0xa8, 0x01, 0x0a, 0x06, 0x53, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x61, 0x6c, 0x74, 0x5f, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x61, 0x6c, 0x74, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x65,
	0x6d, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x65,
	0x6d, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x01, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6b, 0x65, 0x79, 0x4c, 0x65, 0x6e, 0x22, 0xf7, 0x04, 0x0a,
	0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x6f, 0x67, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12,
	0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x75,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x4d, 0x0a, 0x1a, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x18, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x10, 0x68, 0x61, 0x73, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48, 0x61, 0x73, 0x69, 0x6e, 0x67,
	0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x69, 0x6e,
	0x67, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x24, 0x0a, 0x06, 0x62, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x48, 0x65, 0x72,
	0x61, 0x2e, 0x42, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x06, 0x62, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x12, 0x24, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x53, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x06,
	0x73, 0x63, 0x72, 0x79, 0x70, 0x74, 0x22, 0xf7, 0x0c, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1f, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x6c,
	0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x09, 0x62, 0x69,
	0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x05, 0x52, 0x09, 0x62, 0x69, 0x72,
	0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x1a, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f,
	0x73, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x17, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x65, 0x6e, 0x74,
	0x41, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x5d, 0x0a, 0x1d, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1a, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x2e, 0x0a,
	0x13, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x58, 0x0a,
	0x1b, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x17,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x64,
	0x65, 0x53, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x12, 0x5e, 0x0a, 0x1e, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1a, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x72, 0x65, 0x73, 0x65, 0x74, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x55, 0x0a, 0x19, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x16, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65,
	0x78, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x34, 0x0a, 0x16, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x14, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x46, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x07, 0x52, 0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x32, 0x0a, 0x15, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x13, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x41,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x67,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x06, 0x67,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x22, 0xd8, 0x01, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x26,
	0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x48,
	0x65, 0x72, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79,
	0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x22, 0x27, 0x0a, 0x06, 0x53, 0x6f, 0x72, 0x74, 0x42,
	0x79, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x54, 0x10, 0x01,
	0x22, 0x19, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x43,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x45, 0x43, 0x10, 0x01, 0x22, 0xe4, 0x03, 0x0a, 0x05,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x33, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f,
	0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65,
	0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x23, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x48, 0x65,
	0x72, 0x61, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xca, 0x01, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x48, 0x65, 0x72, 0x61,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x53, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x12, 0x44, 0x0a, 0x10, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0e, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x22,
	0xed, 0x02, 0x0a, 0x0b, 0x48, 0x65, 0x72, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x48, 0x65, 0x72, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12,
	0x2b, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x48, 0x65,
	0x72, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a,
	0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x48,
	0x65, 0x72, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12,
	0x21, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x24, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x22,
	0xb4, 0x03, 0x0a, 0x0c, 0x48, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1e, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x20, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x48, 0x65, 0x72, 0x61,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a,
	0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x48, 0x65, 0x72, 0x61, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x12, 0x43, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48,
	0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x24, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x0a,
	0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x39, 0x0a, 0x0c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10,
	0x00, 0x12, 0x06, 0x0a, 0x02, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x44, 0x4b, 0x10,
	0x02, 0x2a, 0x48, 0x0a, 0x0f, 0x48, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x48, 0x41, 0x53, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48,
	0x4d, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x43, 0x52, 0x59, 0x50, 0x54, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x43, 0x52, 0x59, 0x50, 0x54, 0x10, 0x02, 0x2a, 0x52, 0x0a, 0x09, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x4f, 0x4b, 0x45,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x4f, 0x4b, 0x45, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x10, 0x02, 0x2a,
	0x52, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x11,
	0x0a, 0x0d, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54,
	0x49, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x4d, 0x41, 0x49,
	0x4c, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x02, 0x2a, 0x91, 0x01, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x54, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44,
	0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53,
	0x57, 0x4f, 0x52, 0x44, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41,
	0x4d, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x03, 0x12, 0x1b, 0x0a,
	0x17, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x48,
	0x4f, 0x4e, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x05, 0x32, 0xc6, 0x0f, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x12, 0x11, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x11, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48,
	0x65, 0x72, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x48, 0x65, 0x72,
	0x61, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x3d, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x11, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48, 0x65,
	0x72, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x48, 0x65, 0x72, 0x61,
	0x2e, 0x48, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x3c, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x11, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48, 0x65, 0x72, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48,
	0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a,
	0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x12, 0x11, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48, 0x65, 0x72,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x12, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x11, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48, 0x65, 0x72, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0d, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x11, 0x2e, 0x48, 0x65,
	0x72, 0x61, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12,
	0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x11, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x12, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x12, 0x11, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48, 0x65, 0x72, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48,
	0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x34, 0x0a,
	0x09, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x11, 0x2e, 0x48, 0x65, 0x72,
	0x61, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e,
	0x48, 0x65, 0x72, 0x61, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x13, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x11, 0x2e, 0x48, 0x65, 0x72,
	0x61, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e,
	0x48, 0x65, 0x72, 0x61, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x11, 0x2e, 0x48,
	0x65, 0x72, 0x61, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x12, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x11, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48, 0x65,
	0x72, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0b,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x11, 0x2e, 0x48, 0x65,
	0x72, 0x61, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12,
	0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x50, 0x61, 0x69, 0x72, 0x12, 0x11, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48,
	0x65, 0x72, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x48, 0x65, 0x72,
	0x61, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x38, 0x0a, 0x0d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x11, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48, 0x65, 0x72, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0a, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x11, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e,
	0x48, 0x65, 0x72, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x48, 0x65,
	0x72, 0x61, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x37, 0x0a, 0x0c, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x11, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48, 0x65, 0x72, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x11, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48,
	0x65, 0x72, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x48, 0x65, 0x72,
	0x61, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x35, 0x0a, 0x0a, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x11,
	0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x12, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x15, 0x53, 0x65, 0x6e, 0x64, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x11, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0b, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x11, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e,
	0x48, 0x65, 0x72, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x48, 0x65,
	0x72, 0x61, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x3f, 0x0a, 0x14, 0x53, 0x65, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x11, 0x2e, 0x48, 0x65, 0x72, 0x61,
	0x2e, 0x48, 0x65, 0x72, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x48,
	0x65, 0x72, 0x61, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x36, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x12, 0x11, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48, 0x65, 0x72, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x16, 0x53, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x11, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48, 0x65, 0x72, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48,
	0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a,
	0x15, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x11, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48, 0x65,
	0x72, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x48, 0x65, 0x72, 0x61,
	0x2e, 0x48, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x38, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x11, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0f, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x11, 0x2e, 0x48,
	0x65, 0x72, 0x61, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x12, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x11, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e,
	0x48, 0x65, 0x72, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x48, 0x65,
	0x72, 0x61, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x39, 0x0a, 0x0e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x73, 0x61,
	0x4b, 0x65, 0x79, 0x12, 0x11, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48, 0x65,
	0x72, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0f,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12,
	0x11, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x12, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x11, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48, 0x65, 0x72,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e,
	0x48, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37,
	0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x11,
	0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x12, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x11, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x2e, 0x48,
	0x65, 0x72, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x48, 0x65, 0x72,
	0x61, 0x2e, 0x48, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x2f, 0x67, 0x6f, 0x5f, 0x68, 0x65, 0x72, 0x61, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hera_proto_rawDescOnce sync.Once
	file_hera_proto_rawDescData = file_hera_proto_rawDesc
)

func file_hera_proto_rawDescGZIP() []byte {
	file_hera_proto_rawDescOnce.Do(func() {
		file_hera_proto_rawDescData = protoimpl.X.CompressGZIP(file_hera_proto_rawDescData)
	})
	return file_hera_proto_rawDescData
}

var file_hera_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_hera_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_hera_proto_goTypes = []interface{}{
	(LanguageCode)(0),             // 0: Hera.LanguageCode
	(HasingAlgorithm)(0),          // 1: Hera.HasingAlgorithm
	(TokenType)(0),                // 2: Hera.TokenType
	(LoginStatus)(0),              // 3: Hera.LoginStatus
	(LoginType)(0),                // 4: Hera.LoginType
	(Query_SortBy)(0),             // 5: Hera.Query.SortBy
	(Query_Order)(0),              // 6: Hera.Query.Order
	(*Bcrypt)(nil),                // 7: Hera.Bcrypt
	(*Scrypt)(nil),                // 8: Hera.Scrypt
	(*Config)(nil),                // 9: Hera.Config
	(*User)(nil),                  // 10: Hera.User
	(*Query)(nil),                 // 11: Hera.Query
	(*Token)(nil),                 // 12: Hera.Token
	(*LoginSession)(nil),          // 13: Hera.LoginSession
	(*HeraRequest)(nil),           // 14: Hera.HeraRequest
	(*HeraResponse)(nil),          // 15: Hera.HeraResponse
	nil,                           // 16: Hera.HeraResponse.PublicKeysEntry
	(*timestamppb.Timestamp)(nil), // 17: google.protobuf.Timestamp
}
var file_hera_proto_depIdxs = []int32{
	17, // 0: Hera.Config.created_at:type_name -> google.protobuf.Timestamp
	17, // 1: Hera.Config.updated_at:type_name -> google.protobuf.Timestamp
	4,  // 2: Hera.Config.supported_login_mechanisms:type_name -> Hera.LoginType
	1,  // 3: Hera.Config.hasing_algorithm:type_name -> Hera.HasingAlgorithm
	7,  // 4: Hera.Config.bcrypt:type_name -> Hera.Bcrypt
	8,  // 5: Hera.Config.scrypt:type_name -> Hera.Scrypt
	17, // 6: Hera.User.created_at:type_name -> google.protobuf.Timestamp
	17, // 7: Hera.User.updated_at:type_name -> google.protobuf.Timestamp
	17, // 8: Hera.User.birthdate:type_name -> google.protobuf.Timestamp
	17, // 9: Hera.User.verification_email_sent_at:type_name -> google.protobuf.Timestamp
	17, // 10: Hera.User.verification_email_expires_at:type_name -> google.protobuf.Timestamp
	17, // 11: Hera.User.reset_password_code_sent_at:type_name -> google.protobuf.Timestamp
	17, // 12: Hera.User.reset_password_code_expires_at:type_name -> google.protobuf.Timestamp
	17, // 13: Hera.User.verification_text_sent_at:type_name -> google.protobuf.Timestamp
	0,  // 14: Hera.User.preferred_language:type_name -> Hera.LanguageCode
	5,  // 15: Hera.Query.sort:type_name -> Hera.Query.SortBy
	6,  // 16: Hera.Query.order:type_name -> Hera.Query.Order
	17, // 17: Hera.Token.blocked_at:type_name -> google.protobuf.Timestamp
	17, // 18: Hera.Token.created_at:type_name -> google.protobuf.Timestamp
	17, // 19: Hera.Token.used_at:type_name -> google.protobuf.Timestamp
	17, // 20: Hera.Token.expires_at:type_name -> google.protobuf.Timestamp
	2,  // 21: Hera.Token.type:type_name -> Hera.TokenType
	3,  // 22: Hera.LoginSession.login_status:type_name -> Hera.LoginStatus
	17, // 23: Hera.LoginSession.email_sent_at:type_name -> google.protobuf.Timestamp
	17, // 24: Hera.LoginSession.email_expires_at:type_name -> google.protobuf.Timestamp
	10, // 25: Hera.HeraRequest.user:type_name -> Hera.User
	10, // 26: Hera.HeraRequest.user_update:type_name -> Hera.User
	11, // 27: Hera.HeraRequest.query:type_name -> Hera.Query
	10, // 28: Hera.HeraRequest.users:type_name -> Hera.User
	12, // 29: Hera.HeraRequest.token:type_name -> Hera.Token
	9,  // 30: Hera.HeraRequest.config:type_name -> Hera.Config
	10, // 31: Hera.HeraResponse.user:type_name -> Hera.User
	10, // 32: Hera.HeraResponse.users:type_name -> Hera.User
	12, // 33: Hera.HeraResponse.token:type_name -> Hera.Token
	12, // 34: Hera.HeraResponse.tokens:type_name -> Hera.Token
	16, // 35: Hera.HeraResponse.public_keys:type_name -> Hera.HeraResponse.PublicKeysEntry
	9,  // 36: Hera.HeraResponse.config:type_name -> Hera.Config
	13, // 37: Hera.HeraResponse.login_session:type_name -> Hera.LoginSession
	14, // 38: Hera.Service.Heartbeat:input_type -> Hera.HeraRequest
	14, // 39: Hera.Service.CreateUser:input_type -> Hera.HeraRequest
	14, // 40: Hera.Service.UpdateUserMetadata:input_type -> Hera.HeraRequest
	14, // 41: Hera.Service.UpdateUserProfile:input_type -> Hera.HeraRequest
	14, // 42: Hera.Service.UpdateUserContact:input_type -> Hera.HeraRequest
	14, // 43: Hera.Service.UpdateUserPassword:input_type -> Hera.HeraRequest
	14, // 44: Hera.Service.SearchForUser:input_type -> Hera.HeraRequest
	14, // 45: Hera.Service.GetUser:input_type -> Hera.HeraRequest
	14, // 46: Hera.Service.GetUsers:input_type -> Hera.HeraRequest
	14, // 47: Hera.Service.ListUsers:input_type -> Hera.HeraRequest
	14, // 48: Hera.Service.ValidateCredentials:input_type -> Hera.HeraRequest
	14, // 49: Hera.Service.Login:input_type -> Hera.HeraRequest
	14, // 50: Hera.Service.DeleteUser:input_type -> Hera.HeraRequest
	14, // 51: Hera.Service.DeleteUsers:input_type -> Hera.HeraRequest
	14, // 52: Hera.Service.CreateTokenPair:input_type -> Hera.HeraRequest
	14, // 53: Hera.Service.ValidateToken:input_type -> Hera.HeraRequest
	14, // 54: Hera.Service.BlockToken:input_type -> Hera.HeraRequest
	14, // 55: Hera.Service.RefreshToken:input_type -> Hera.HeraRequest
	14, // 56: Hera.Service.GetTokens:input_type -> Hera.HeraRequest
	14, // 57: Hera.Service.PublicKeys:input_type -> Hera.HeraRequest
	14, // 58: Hera.Service.SendVerificationEmail:input_type -> Hera.HeraRequest
	14, // 59: Hera.Service.VerifyEmail:input_type -> Hera.HeraRequest
	14, // 60: Hera.Service.SendVerificationText:input_type -> Hera.HeraRequest
	14, // 61: Hera.Service.VerifyPhone:input_type -> Hera.HeraRequest
	14, // 62: Hera.Service.SendResetPasswordEmail:input_type -> Hera.HeraRequest
	14, // 63: Hera.Service.SendResetPasswordText:input_type -> Hera.HeraRequest
	14, // 64: Hera.Service.ResetPassword:input_type -> Hera.HeraRequest
	14, // 65: Hera.Service.DeleteNamespace:input_type -> Hera.HeraRequest
	14, // 66: Hera.Service.CreateNamespace:input_type -> Hera.HeraRequest
	14, // 67: Hera.Service.RegisterRsaKey:input_type -> Hera.HeraRequest
	14, // 68: Hera.Service.RemovePublicKey:input_type -> Hera.HeraRequest
	14, // 69: Hera.Service.GetConfig:input_type -> Hera.HeraRequest
	14, // 70: Hera.Service.UpdateConfig:input_type -> Hera.HeraRequest
	14, // 71: Hera.Service.DeleteConfig:input_type -> Hera.HeraRequest
	15, // 72: Hera.Service.Heartbeat:output_type -> Hera.HeraResponse
	15, // 73: Hera.Service.CreateUser:output_type -> Hera.HeraResponse
	15, // 74: Hera.Service.UpdateUserMetadata:output_type -> Hera.HeraResponse
	15, // 75: Hera.Service.UpdateUserProfile:output_type -> Hera.HeraResponse
	15, // 76: Hera.Service.UpdateUserContact:output_type -> Hera.HeraResponse
	15, // 77: Hera.Service.UpdateUserPassword:output_type -> Hera.HeraResponse
	15, // 78: Hera.Service.SearchForUser:output_type -> Hera.HeraResponse
	15, // 79: Hera.Service.GetUser:output_type -> Hera.HeraResponse
	15, // 80: Hera.Service.GetUsers:output_type -> Hera.HeraResponse
	15, // 81: Hera.Service.ListUsers:output_type -> Hera.HeraResponse
	15, // 82: Hera.Service.ValidateCredentials:output_type -> Hera.HeraResponse
	15, // 83: Hera.Service.Login:output_type -> Hera.HeraResponse
	15, // 84: Hera.Service.DeleteUser:output_type -> Hera.HeraResponse
	15, // 85: Hera.Service.DeleteUsers:output_type -> Hera.HeraResponse
	15, // 86: Hera.Service.CreateTokenPair:output_type -> Hera.HeraResponse
	15, // 87: Hera.Service.ValidateToken:output_type -> Hera.HeraResponse
	15, // 88: Hera.Service.BlockToken:output_type -> Hera.HeraResponse
	15, // 89: Hera.Service.RefreshToken:output_type -> Hera.HeraResponse
	15, // 90: Hera.Service.GetTokens:output_type -> Hera.HeraResponse
	15, // 91: Hera.Service.PublicKeys:output_type -> Hera.HeraResponse
	15, // 92: Hera.Service.SendVerificationEmail:output_type -> Hera.HeraResponse
	15, // 93: Hera.Service.VerifyEmail:output_type -> Hera.HeraResponse
	15, // 94: Hera.Service.SendVerificationText:output_type -> Hera.HeraResponse
	15, // 95: Hera.Service.VerifyPhone:output_type -> Hera.HeraResponse
	15, // 96: Hera.Service.SendResetPasswordEmail:output_type -> Hera.HeraResponse
	15, // 97: Hera.Service.SendResetPasswordText:output_type -> Hera.HeraResponse
	15, // 98: Hera.Service.ResetPassword:output_type -> Hera.HeraResponse
	15, // 99: Hera.Service.DeleteNamespace:output_type -> Hera.HeraResponse
	15, // 100: Hera.Service.CreateNamespace:output_type -> Hera.HeraResponse
	15, // 101: Hera.Service.RegisterRsaKey:output_type -> Hera.HeraResponse
	15, // 102: Hera.Service.RemovePublicKey:output_type -> Hera.HeraResponse
	15, // 103: Hera.Service.GetConfig:output_type -> Hera.HeraResponse
	15, // 104: Hera.Service.UpdateConfig:output_type -> Hera.HeraResponse
	15, // 105: Hera.Service.DeleteConfig:output_type -> Hera.HeraResponse
	72, // [72:106] is the sub-list for method output_type
	38, // [38:72] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_hera_proto_init() }
func file_hera_proto_init() {
	if File_hera_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hera_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bcrypt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hera_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scrypt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hera_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hera_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hera_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hera_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hera_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hera_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeraRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hera_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeraResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_hera_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hera_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_hera_proto_goTypes,
		DependencyIndexes: file_hera_proto_depIdxs,
		EnumInfos:         file_hera_proto_enumTypes,
		MessageInfos:      file_hera_proto_msgTypes,
	}.Build()
	File_hera_proto = out.File
	file_hera_proto_rawDesc = nil
	file_hera_proto_goTypes = nil
	file_hera_proto_depIdxs = nil
}
